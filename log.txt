{Fixpoint computation}: NOT Cached: {iterate}expr not in stack, adding body to stack
########################### evalf done
{Fixpoint computation}: NOT Cached: {iterate}expr not in stack, adding body to stack
in 0, eval:(loop
  (local.get 0)
  (i32.const 1)
  (i32.add)
  (local.set 0)
  (local.get 0)
  (i32.const 10)
  (i32.lt_s)
  (br_if 0)
)
{Fixpoint computation}: NOT Cached: {iterate}expr not in stack, adding body to stack
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
~~~~~~ briffing 
~~~~~~ briffing -> BR 
{Fixpoint computation}: NOT Cached: {iterate}expr in stack, what do i do?
ENV1 LEQ ENV2 -> TRUE
in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 1)
in 0, eval:(i32.add)
in 0, eval:(local.set 0)
	~ Assigning:Expr:Loc_int32_0 + [1; 1][-1/0; 1/0]in 0, eval:(local.get 0)
	~ Getting:LVarRef:int32_0
	# (when concretized:[-1/0; 1/0])
in 0, eval:(i32.const 10)
in 0, eval:(i32.lt_s)
in 0, eval:(br_if 0)
